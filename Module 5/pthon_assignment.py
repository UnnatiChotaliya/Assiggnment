# -*- coding: utf-8 -*-
"""Pthon_Assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Mo2EDrQ8vgOYVbbA-blwbwcB2ZRWhWVT
"""

# 1) What are the types of Applications?
# •	Applications app are software programs designed to perform specific tasks for users. They can be classified in several ways depending on platform, purpose, and deployment method. Here’s a clear.

# 2) What is programing?
# Programming is the practice of writing code using a programming language (like Python, Java, C, etc.) to solve problems or build software.

# 3) What is Python?
# Python is a high-level, interpreted, and general-purpose programming language that is widely used for building applications, automating tasks, and analyzing data.

# 4) Write a Python program to check if a number is positive, negative or zero.

num = float(input("Enter a number:"))
if num > 0:
    print("Positive number")
elif num == 0:
    print("Zero")
else:
    print("Negative number")

# 5)Write a Python program to get the Factorial number of given numbers.

num = int(input("Enter a number:"))
factorial = 1
if num < 0:
    print("Sorry, factorial does not exist for negative numbers.")
elif num == 0:
    print("The factorial of 0 is 1.")
else:
    for i in range(1, num + 1):
        factorial = factorial * i
    print(f"The factorial of {num} is {factorial}")

# 6)Write a Python program to get the Fibonacci series of given range.

n = int(input("Enter the range (number of terms): "))

a, b = 0, 1

print("Fibonacci Series:")
for i in range(n):
    print(a, end=" ")
    a, b = b, a + b

# 7)How memory is managed in Python?
# - Python has a private heap space where all objects and data structures are stored.
# - The programmer does not directly control memory allocation or deallocation (like in C or C++).
# - Instead, Python manages memory automatically.

# 8)What is the purpose continuing statement in python?
# - The continue statement is used inside loops (for or while).
# - It tells Python to skip the current iteration and move to the next iteration of the loop.

# 9) Write python program that swap two number with temp variable and without temp variable.

a = int(input("Enter first number: "))
b = int(input("Enter second number: "))

print("Before swapping: a =", a, " b =", b)

temp = a
a = b
b = temp

print("After swapping (with temp): a =", a, " b =", b)

# 10) Write a Python program to find whether a given number is even or odd, print out an appropriate message to the user.

num = int(input("Enter a number: "))

if num % 2 == 0:
    print(num, "is Even")
else:
    print(num, "is Odd")

# 11) Write a Python program to test whether a passed letter is a vowel or not.

ch = input("Enter a leter").lower()
if ch in['a','e','i','o','u']:
  print(ch ,"is a vowel")
else:
    print(ch,"is not a vowel")

# 12) Write a Python program to sum of three given integers. However, if two values are equal sum will be zero.

def sum_three(x,y,z):
  if x == z or y == z or x == y:
    return 0
  else:
    return x + y + z
a = int((input("Enter first number: ")))
b = int((input("Enter second number: ")))
c = int((input("Enter third number: ")))
print(sum_three(a,b,c))

# 13) Write a Python program that will return true if the two given integer values are equal or their sum or difference is 5.

def test_numbers(x, y):
    return x == y or (x + y == 5) or (abs(x - y) == 5)

# take input from user
a = int(input("Enter fir st number: "))
b = int(input("Enter second number: "))

print("Result:", test_numbers(a, b))

# 14)Program to find sum of first n positive integers

n = int(input("Enter a positive integer: "))

# using formula
sum_n = n * (n + 1) // 2

print("Sum of first", n, "positive integers is:", sum_n)

# 15)Write a Python program to calculate the length of a string.
text = input("Enter a string: ")

length = len(text)

print("The length of the string is:", length)

# 16) Write a Python program to count the number of characters (character frequency) in a string

text = input("Enter a string: ")

freq = {}  # empty dictionary

for char in text:
    if char in freq:
        freq[char] += 1
    else:
        freq[char] = 1

# Display frequency of each character
for char, count in freq.items():
    print(f"'{char}': {count}")

# 17)What are negative indexes and why are they used?
# - In Python, negative indexes are used to access elements from the end of a sequence (like a list, string, or tuple).
# - The last element has index -1, the second last -2, and so on.



# 18)Write a Python program to count occurrences of a substring in a string.
main_string = input("Enter the main string: ")
substring = input("Enter the substring to search: ")

# Count occurrences using count() method
count = main_string.count(substring)

print(f"The substring '{substring}' occurs {count} times in the given string.")

# 19) Write a Python program to count the occurrences of each word in a given sentence

sentence = input("Enter a sentence: ")

# Convert to lowercase to avoid case mismatches
sentence = sentence.lower()

# Split sentence into words
words = sentence.split()

# Create a dictionary to store word counts
word_count = {}

# Count each word
for word in words:
    word_count[word] = word_count.get(word, 0) + 1

# Display the word counts
print("Word occurrences in the sentence:")
for word, count in word_count.items():
    print(f"{word}: {count}")

# 20) Write a Python program to get a single string from two given strings,separated by a space and swap the first two characters of each string.

str1 = input("Enter first string: ")
str2 = input("Enter second string: ")

# Swap the first two characters of each string
new_str1 = str2[:2] + str1[2:]
new_str2 = str1[:2] + str2[2:]

# Join with a space
result = new_str1 + " " + new_str2

print("Resulting string:", result)

# 21) Write a Python program to add 'in' at the end of a given string (length should be at least 3). If the given string already ends with 'ing' then add 'ly' instead if the string length of the given string is less than 3,
# leave it unchanged.

s = input("Enter a string: ")

# Check length
if len(s) >= 3:
    if s.endswith("ing"):
        s = s + "ly"
    else:
        s = s + "ing"
else:
    # Leave unchanged if length < 3
    s = s

print("Resulting string:", s)

# 22) Write a Python function to reverses a string if its length is a multiple of 4.
def reverse_if_multiple_of_4(s):
    if len(s) % 4 == 0:
        return s[::-1]   # reverse string
    else:
        return s         # unchanged

# Example usage
string1 = "abcd"   # length 4 → multiple of 4
string2 = "hello"  # length 5 → not multiple of 4

print(reverse_if_multiple_of_4(string1))  # Output: "dcba"
print(reverse_if_multiple_of_4(string2))  # Output: "hello"

# 23) Write a Python program to get a string made of the first 2 and the last 2 chars from a given a string. If the string length is less than 2, return instead of the empty string.

def first_last_two_chars(s):
    if len(s) < 2:
        return ""   # return empty string if length < 2
    else:
        return s[:2] + s[-2:]

# Example usage
string1 = input("Enter a string: ")
result = first_last_two_chars(string1)
print("Resulting string:", result)

# 24)Write a Python function to insert a string in the middle of a string.
def insert_middle(original, insert):
    mid = len(original) // 2   # Find the middle index
    return original[:mid] + insert + original[mid:]

# Example usage:
print(insert_middle("Python", "123"))   # Output: Py123thon
print(insert_middle("Hello", "World"))  # Output: HeWorldllo

# 25)What is List? How will you reverse a list?

# - A list in Python is a collection of ordered, mutable (changeable) elements.
# - It can hold items of different data types (integers, strings, floats, even other lists).
# - Lists are written with square brackets [].
my_list = [10, "Hello", 3.14, True]
print(my_list)   # Output: [10, 'Hello', 3.14, True]

# 26)How will you remove last object from a list?
# - using pop() option
my_list = [10, 20, 30, 40]
my_list.pop()   # removes the last element
print(my_list)  # Output: [10, 20, 30]

# 27)Suppose list1 is [2, 33, 222, 14, and 25], what is list1 [-
# list1 = [2, 33, 222, 14, 25]

# 28)Differentiate between append () and extend () methods?
# - append() → adds the whole object as a single element, A single object (any data type)
# Example: python\nlst = [1,2]\nlst.append([3,4])\nprint(lst) # [1, 2, [3, 4]]\n
# - extend() → adds each element individually, An iterable (list, tuple, set, string, etc.)
# Example: python\nlst = [1,2]\nlst.extend([3,4])\nprint(lst) # [1, 2, 3, 4] \n

# 29) Write a Python function to get the largest number, smallest num and sum of all from a list.

def list_summary(numbers):
    largest = max(numbers)
    smallest = min(numbers)
    total_sum = sum(numbers)
    return largest, smallest, total_sum

# Example usage:
numbers = [2, 33, 222, 14, 25]
largest, smallest, total_sum = list_summary(numbers)

print("Largest number:", largest)
print("Smallest number:", smallest)
print("Sum of all numbers:", total_sum)

# 30)How will you compare two lists?
list1 = [1, 2, 3]
list2 = [1, 2, 3]

if list1 == list2:
    print("Both lists are equal")
else:
    print("Lists are not equal")

#31) Write a Python program to count the number of strings where the string length is 2 or more and the first and last character are same from a given list of strings.
def match_words(words):
    count = 0
    for word in words:
        if len(word) >= 2 and word[0] == word[-1]:
            count += 1
    return count

# Example usage:
words = ['abc', 'xyz', 'aba', '1221', 'mom', 'ab']
print("Number of strings:", match_words(words))

# 32)Write a Python program to remove duplicates from a list.
def remove_duplicates(lst):
    return list(set(lst))

# Example usage:
numbers = [1, 2, 3, 1, 2, 4, 5, 3]
new_list = remove_duplicates(numbers)

print("List after removing duplicates:", new_list)

# 33)Write a Python program to check a list is empty or not.
def check_empty(lst):
    if not lst:
        print("The list is empty")
    else:
        print("The list is not empty")

# Example usage:
list1 = []
list2 = [10, 20, 30]

check_empty(list1)
check_empty(list2)

# 34) Write a Python function that takes two lists and returns true if they have at least one common member.
def common_member(list1, list2):
    for item in list1:
        if item in list2:
            return True
    return False

# Example usage:
list1 = [1, 2, 3, 4, 5]
list2 = [5, 6, 7, 8, 9]

print("Common member:", common_member(list1, list2))

# 35) Write a Python program to generate and print a list of first and last 5 elements where the values are square of numbers between 1 and 30
def print_square_list():
    squares = [x**2 for x in range(1, 31)]  # squares of numbers from 1 to 30
    print("First 5 elements:", squares[:5])
    print("Last 5 elements:", squares[-5:])

# Example usage:
print_square_list()

# 36) Write a Python function that takes a list and returns a new list with unique elements of the first list.
def unique_list(lst):
    unique = []
    for item in lst:
        if item not in unique:
            unique.append(item)
    return unique

# Example usage:
numbers = [1, 2, 3, 1, 2, 4, 5, 3]
print("Unique elements:", unique_list(numbers))

# 37)Write a Python program to convert a list of characters into a string.
def chars_to_string(char_list):
    return ''.join(char_list)

# Example usage:
char_list = ['P', 'y', 't', 'h', 'o', 'n']
result = chars_to_string(char_list)
print("String:", result)

# 38)Write a Python program to select an item randomly from a list.
import random

def random_item(lst):
    return random.choice(lst)

# Example usage:
items = [10, 20, 30, 40, 50, 'Apple', 'Banana']
print("Randomly selected item:", random_item(items))

# 39)Write a Python program to find the second smallest number in a list.
def second_smallest(lst):
    unique_lst = list(set(lst))  # remove duplicates
    unique_lst.sort()             # sort the list
    if len(unique_lst) < 2:
        return None  # not enough elements
    return unique_lst[1]          # second smallest

# Example usage:
numbers = [4, 1, 7, 2, 8, 1, 3]
print("Second smallest number:", second_smallest(numbers))

# 40)Write a Python program to get unique values from a list
def unique_values(lst):
    return list(set(lst))

# Example usage:
numbers = [1, 2, 3, 1, 2, 4, 5, 3]
print("Unique values:", unique_values(numbers))

# 41)Write a Python program to check whether a list contains a sub list
def contains_sublist(main_list, sub_list):
    sub_len = len(sub_list)
    for i in range(len(main_list) - sub_len + 1):
        if main_list[i:i+sub_len] == sub_list:
            return True
    return False

# Example usage:
main_list = [1, 2, 3, 4, 5, 6]
sub_list1 = [2, 3, 4]
sub_list2 = [3, 5]

print(contains_sublist(main_list, sub_list1))  # True
print(contains_sublist(main_list, sub_list2))  # False

# 42)Write a Python program to split a list into different variables.
# Example list
my_list = [10, 20, 30]

# Split list into variables
a, b, c = my_list

print("a =", a)
print("b =", b)
print("c =", c)

# 43)What is tuple? Difference between list and tuple.
# Feature         | List                     | Tuple                     |
# --------------- | ------------------------ | ------------------------- |
# **Syntax**      | `[]`                     | `()`                      |
# **Mutability**  | Mutable (can change)     | Immutable (cannot change) |
# **Performance** | Slower (more flexible)   | Faster (less flexible)    |
# **Methods**     | More built-in methods    | Fewer methods             |
# **Use Case**    | When elements may change | When elements are fixed   |

# 44)Write a Python program to create a tuple with different data types.
# Creating a tuple with different data types
my_tuple = (1, "Python", 3.14, True)

print("Tuple:", my_tuple)
print("Data types of elements:")
for item in my_tuple:
    print(f"{item} -> {type(item)}")

# 45)Write a Python program to unzip a list of tuples into individual lists.
# List of tuples
tuple_list = [(1, 'a'), (2, 'b'), (3, 'c')]

# Unzip using zip(*tuple_list)
numbers, letters = zip(*tuple_list)

# Convert tuples to lists
numbers = list(numbers)
letters = list(letters)

print("Numbers:", numbers)
print("Letters:", letters)

#46)Write a Python program to convert a list of tuples into a dictionary.
# List of tuples
tuple_list = [('a', 1), ('b', 2), ('c', 3)]

# Convert to dictionary
my_dict = dict(tuple_list)

print("Dictionary:", my_dict)

# 47)How will you create a dictionary using tuples in python?
# List of tuples (key, value)
tuple_list = [('a', 1), ('b', 2), ('c', 3)]

# Convert to dictionary
my_dict = dict(tuple_list)

print(my_dict)

# 48)Write a Python script to sort (ascending and descending) a dictionary by value
# Sample dictionary
my_dict = {'apple': 10, 'banana': 5, 'cherry': 20, 'date': 15}

# Sort dictionary by value in ascending order
asc_sorted = dict(sorted(my_dict.items(), key=lambda item: item[1]))
print("Ascending order:", asc_sorted)

# Sort dictionary by value in descending order
desc_sorted = dict(sorted(my_dict.items(), key=lambda item: item[1], reverse=True))
print("Descending order:", desc_sorted)

# 49)Write a Python script to concatenate following dictionaries to create a new one.
# Sample dictionaries
dict1 = {'a': 1, 'b': 2}
dict2 = {'c': 3, 'd': 4}
dict3 = {'e': 5, 'f': 6}

# Method 1: Using dictionary unpacking (Python 3.5+)
new_dict = {**dict1, **dict2, **dict3}
print("Concatenated dictionary:", new_dict)

# Method 2: Using update()
new_dict2 = dict1.copy()  # make a copy of dict1
new_dict2.update(dict2)
new_dict2.update(dict3)
print("Concatenated dictionary (using update):", new_dict2)

# 50)Write a Python script to check if a given key already exists in a dictionary.
# Sample dictionary
my_dict = {'name': 'Alice', 'age': 25, 'city': 'New York'}

# Key to check
key_to_check = 'age'

# Method 1: Using 'in' keyword
if key_to_check in my_dict:
    print(f"Key '{key_to_check}' exists in the dictionary")
else:
    print(f"Key '{key_to_check}' does not exist in the dictionary")

# Method 2: Using get() method
if my_dict.get(key_to_check) is not None:
    print(f"Key '{key_to_check}' exists (checked using get())")
else:
    print(f"Key '{key_to_check}' does not exist (checked using get())")

# 51)How Do You Traverse Through a Dictionary Object in Python?
my_dict = {'name': 'Alice', 'age': 25, 'city': 'New York'}

for key in my_dict:
    print(key)

# 52)How Do You Check the Presence of a Key in A Dictionary?
my_dict = {'name': 'Alice', 'age': 25, 'city': 'New York'}

key_to_check = 'age'

if key_to_check in my_dict:
    print(f"Key '{key_to_check}' exists in the dictionary")
else:
    print(f"Key '{key_to_check}' does not exist in the dictionary")

# 53)Write a Python script to print a dictionary where the keys are numbers between 1 and 15.
# Create dictionary where keys are numbers from 1 to 15 and values are their squares
my_dict = {x: x**2 for x in range(1, 16)}

# Print the dictionary
print("Dictionary:", my_dict)

# 54)Write a Python program to check multiple keys exists in a dictionary
# Sample dictionary
my_dict = {'name': 'Alice', 'age': 25, 'city': 'New York'}

# Keys to check
keys_to_check = ['name', 'age', 'country']

# Method 1: Using all()
if all(key in my_dict for key in keys_to_check):
    print("All keys exist in the dictionary")
else:
    print("Not all keys exist in the dictionary")

# Method 2: Check each key individually
for key in keys_to_check:
    if key in my_dict:
        print(f"Key '{key}' exists")
    else:
        print(f"Key '{key}' does not exist")

# 55)Write a Python script to merge two Python dictionaries
dict1 = {'a': 1, 'b': 2}
dict2 = {'c': 3, 'd': 4}

# Merge dictionaries
merged_dict = {**dict1, **dict2}

print("Merged dictionary:", merged_dict)

# 56)Write a Python program to map two lists into a dictionary
keys = ['a', 'b', 'c']
values = [1, 2, 3]

# Create dictionary using zip()
my_dict = dict(zip(keys, values))

print("Dictionary:", my_dict)

# 57)Write a Python program to find the highest 3 values in a dictionary
# Sample dictionary
my_dict = {'a': 10, 'b': 30, 'c': 20, 'd': 50, 'e': 40}

# Method 1: Using sorted()
highest_3 = sorted(my_dict.values(), reverse=True)[:3]
print("Highest 3 values:", highest_3)

# Method 2: Using heapq (efficient for large dictionaries)
import heapq
highest_3_heap = heapq.nlargest(3, my_dict.values())
print("Highest 3 values (using heapq):", highest_3_heap)

# 58)Write a Python program to combine values in python list of dictionaries.
# Sample data: [{'item': 'item1', 'amount': 400}, {'item': 'item2', 'amount':300}, o {'item': 'item1', 'amount': 750}]
from collections import defaultdict

# Sample data
data = [
    {'item': 'item1', 'amount': 400},
    {'item': 'item2', 'amount': 300},
    {'item': 'item1', 'amount': 750}
]

# Combine amounts using defaultdict
combined = defaultdict(int)
for entry in data:
    combined[entry['item']] += entry['amount']

# Convert to list of dictionaries
result = [{'item': item, 'amount': amount} for item, amount in combined.items()]

print("Combined data:", result)

# 59)Write a Python program to create a dictionary from a string. Note: Track the count of the letters from the string.
# Sample string
text = "hello world"

# Method 1: Using a for loop
letter_count = {}
for char in text:
    if char.isalpha():  # consider only letters
        letter_count[char] = letter_count.get(char, 0) + 1

print("Letter count:", letter_count)

# 60)Sample string: 'w3resource' Expected output: • {'3': 1,’s’: 1, 'r': 2, 'u': 1, 'w': 1, 'c': 1, 'e': 2, 'o': 1}
# Sample string
text = "w3resource"

# Count characters
char_count = {}
for char in text:
    char_count[char] = char_count.get(char, 0) + 1

print(char_count)

# 61)Write a Python function to calculate the factorial of a number (a nonnegative integer)
def factorial(n):
    if n < 0:
        return "Factorial is not defined for negative numbers"
    elif n == 0 or n == 1:
        return 1
    else:
        result = 1
        for i in range(2, n + 1):
            result *= i
        return result

# Example usage:
num = 5
print(f"Factorial of {num} is {factorial(num)}")

# 62)Write a Python function to check whether a number is in a given range
def is_in_range(num, start, end):
    """Check if num is within the range [start, end] inclusive"""
    if start <= num <= end:
        return True
    else:
        return False

# Example usage:
number = 7
print(is_in_range(number, 1, 10))  # True
print(is_in_range(number, 8, 15))  # False

# 63)Write a Python function to check whether a number is perfect or not.
def is_perfect(number):
    """
    A perfect number is a positive integer that is equal to the sum
    of its proper divisors (excluding itself)
    """
    if number < 1:
        return False

    divisors_sum = sum(i for i in range(1, number) if number % i == 0)
    return divisors_sum == number

# Example usage:
num = 28
print(f"{num} is perfect? {is_perfect(num)}")

num2 = 12
print(f"{num2} is perfect? {is_perfect(num2)}")

# 64)Write a Python function that checks whether a passed string is palindrome or not
def is_palindrome(s):
    """
    Check if a string is a palindrome.
    A palindrome reads the same forwards and backwards.
    """
    s = s.lower().replace(" ", "")  # ignore case and spaces
    return s == s[::-1]

# Example usage:
print(is_palindrome("Madam"))       # True
print(is_palindrome("Racecar"))     # True
print(is_palindrome("Hello"))       # False

# 65)How Many Basic Types of Functions Are Available in Python?
print(len("Python"))  # Output: 6

#  66)How can you pick a random item from a list or tuple?
import random

# List
my_list = [10, 20, 30, 40, 50]

# Pick a random item
item = random.choice(my_list)
print("Random item from list:", item)

# Tuple
my_tuple = ('apple', 'banana', 'cherry')
item2 = random.choice(my_tuple)
print("Random item from tuple:", item2)

# 67)How can you pick a random item from a range?
import random

# Pick a random number from 1 to 10
num = random.choice(range(1, 11))
print("Random number:", num)

# 68)How can you get a random number in python?
import random

num = random.randint(1, 10)
print("Random integer:", num)

# 69)How will you set the starting value in generating random numbers?
import random

# Set the starting value (seed)
random.seed(42)

# Generate random numbers
print(random.randint(1, 100))
print(random.randint(1, 100))
print(random.randint(1, 100))

# 70) How will you randomize the items of a list in place?
import random

my_list = [1, 2, 3, 4, 5]

# Shuffle the list in place
random.shuffle(my_list)

print("Shuffled list:", my_list)

# 71)What is File function in python? What are keywords to create and write file.
# file_object = open(filename, mode)
# Create and write a file
file = open("example.txt", "w")  # 'w' mode creates the file
file.write("Hello, Python file handling!\n")
file.write("This is a new line.")
file.close()  # Always close the file

# 72)Write a Python program to read an entire text file.
# Open the file in read mode
file = open("example.txt", "r")

# Read the entire file content
content = file.read()
print(content)

# Close the file
file.close()

# 73)Write a Python program to append text to a file and display the text.
# File name
filename = "example.txt"

# Text to append
text_to_append = "\nThis is the appended line."

# Append text to the file
with open(filename, "a") as file:  # 'a' mode for append
    file.write(text_to_append)

# Read and display the updated content
with open(filename, "r") as file:
    content = file.read()
    print("Updated file content:\n", content)

# 74)Write a Python program to read first n lines of a file.
# File name
filename = "example.txt"

# Number of lines to read
n = 3

# Open the file and read first n lines
with open(filename, "r") as file:
    for i in range(n):
        line = file.readline()
        if not line:
            break  # End of file reached
        print(line, end='')  # end='' avoids adding extra newline

# 75)Write a Python program to read last n lines of a file.
# File name
filename = "example.txt"

# Number of lines to read from the end
n = 3

# Open the file and read all lines
with open(filename, "r") as file:
    lines = file.readlines()  # read all lines into a list

# Get the last n lines
last_lines = lines[-n:]

# Display the last n lines
for line in last_lines:
    print(line, end='')

# 76)Write a Python program to read a file line by line and store it into a list
# File name
filename = "example.txt"

# Initialize an empty list
lines_list = []

# Read file line by line and store into the list
with open(filename, "r") as file:
    for line in file:
        lines_list.append(line.strip())  # strip() removes newline characters

# Display the list
print(lines_list)

# 77)Write a Python program to read a file line by line store it into a variable.
# File name
filename = "example.txt"

# Initialize an empty string
file_content = ""

# Read the file line by line
with open(filename, "r") as file:
    for line in file:
        file_content += line  # add each line to the variable

# Display the content
print(file_content)

# 78)Write a python program to find the longest words.
# Sample text
text = "Python programming is fun and allows you to solve complex problems"

# Split text into words
words = text.split()

# Find the length of the longest word
max_length = max(len(word) for word in words)

# Find all words with the maximum length
longest_words = [word for word in words if len(word) == max_length]

print("Longest word(s):", longest_words)

# 79)Write a Python program to count the number of lines in a text file.
# File name
filename = "example.txt"

line_count = 0

with open(filename, "r") as file:
    for line in file:
        line_count += 1

print("Number of lines in the file:", line_count)

# 80)Write a Python program to count the frequency of words in a file.
from collections import Counter

# File name
filename = "example.txt"

# Read the file
with open(filename, "r") as file:
    text = file.read()

# Split the text into words (basic split by spaces)
words = text.split()

# Count the frequency of each word
word_count = Counter(words)

# Display the word frequencies
for word, count in word_count.items():
    print(f"{word}: {count}")

# 81)Write a Python program to write a list to a file.
# Sample list
my_list = ["Python", "Java", "C++", "JavaScript"]

# File name
filename = "output.txt"

# Write the list to the file
with open(filename, "w") as file:
    for item in my_list:
        file.write(item + "\n")  # write each item in a new line

print(f"List has been written to {filename}")

# 82)Write a Python program to copy the contents of a file to another file.
# Source and destination files
source_file = "example.txt"
destination_file = "destination.txt"

# Open source file and read content
with open(source_file, "r") as src:
    content = src.read()

# Write content to destination file
with open(destination_file, "w") as dest:
    dest.write(content)

print(f"Contents of {source_file} copied to {destination_file}")

# 83)Explain Exception handling? What is an Error in Python?
# Error Type            | Description                   | Example                          |
# --------------------- | ----------------------------- | -------------------------------- |
# **SyntaxError**       | Error in Python syntax        | `print("Hello`                   |
# **NameError**         | Variable/function not defined | `print(x)` when `x` is undefined |
# **TypeError**         | Operation on wrong type       | `"2" + 2`                        |
# **ValueError**        | Invalid value                 | `int("abc")`                     |
# **ZeroDivisionError** | Division by zero              | `10/0`                           |
# **IndexError**        | Invalid index in a list/tuple | `[1,2][5]`                       |

# 84)How many except statements can a try-except block have? Name Some built-in exception classes:
try:
    num = int(input("Enter a number: "))
    result = 10 / num
except ValueError:
    print("Invalid input! Please enter a number.")
except ZeroDivisionError:
    print("Cannot divide by zero!")
except Exception:  # catch any other exception
    print("Some other error occurred.")

# 85)When will the else part of try-except-else be executed?
try:
    num = int(input("Enter a number: "))
    result = 10 / num
except ValueError:
    print("Invalid input! Please enter a number.")
except ZeroDivisionError:
    print("Cannot divide by zero!")
else:
    print("No exceptions occurred. Result is:", result)
finally:
    print("Execution finished.")

# 86)Can one block of except statements handle multiple exception?
try:
    # Code that may raise multiple types of exceptions
    num = int(input("Enter a number: "))
    result = 10 / num
except (ValueError, ZeroDivisionError) as e:
    print("An error occurred:", e)

# 87)When is the finally block executed?
try:
    num = int(input("Enter a number: "))
    result = 10 / num
except ZeroDivisionError:
    print("Cannot divide by zero!")
except ValueError:
    print("Invalid input! Please enter a number.")
else:
    print("Result is:", result)
finally:
    print("This will always be executed.")

# 88)What happens when „1‟== 1 is executed?
'1' == 1

# 89)How Do You Handle Exceptions with Try/Except/Finally in Python? Explain with coding snippets.
try:
    # Code that may raise an exception
    pass
except ExceptionType1:
    # Handle ExceptionType1
    pass
except ExceptionType2 as e:
    # Handle ExceptionType2
    pass
else:
    # Optional: executes if no exception occurs
    pass
finally:
    # Optional: always executes, regardless of exceptions
    pass

# 90)Write python program that user to enter only odd numbers, else will raise an exception.
# Custom exception class
class NotOddNumberError(Exception):
    pass

try:
    num = int(input("Enter an odd number: "))
    if num % 2 == 0:
        raise NotOddNumberError(f"{num} is not an odd number!")
    print(f"Thank you! You entered the odd number: {num}")
except ValueError:
    print("Invalid input! Please enter an integer.")
except NotOddNumberError as e:
    print("Error:", e)

